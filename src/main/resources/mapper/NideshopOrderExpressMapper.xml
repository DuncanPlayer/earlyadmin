<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.messi.earlyadmin.mapper.NideshopOrderExpressMapper">
    <resultMap id="BaseResultMap" type="net.messi.earlyadmin.pojo.NideshopOrderExpress">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="order_id" property="orderId" jdbcType="INTEGER"/>
        <result column="shipper_id" property="shipperId" jdbcType="INTEGER"/>
        <result column="shipper_name" property="shipperName" jdbcType="VARCHAR"/>
        <result column="shipper_code" property="shipperCode" jdbcType="VARCHAR"/>
        <result column="logistic_code" property="logisticCode" jdbcType="VARCHAR"/>
        <result column="traces" property="traces" jdbcType="VARCHAR"/>
        <result column="is_finish" property="isFinish" jdbcType="BIT"/>
        <result column="request_count" property="requestCount" jdbcType="INTEGER"/>
        <result column="request_time" property="requestTime" jdbcType="INTEGER"/>
        <result column="add_time" property="addTime" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, order_id, shipper_id, shipper_name, shipper_code, logistic_code, traces, is_finish,
        request_count, request_time, add_time, update_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpressExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from nideshop_order_express
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from nideshop_order_express
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from nideshop_order_express
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpressExample">
        delete from nideshop_order_express
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpress">
        insert into nideshop_order_express (id, order_id, shipper_id,
        shipper_name, shipper_code, logistic_code,
        traces, is_finish, request_count,
        request_time, add_time, update_time
        )
        values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{shipperId,jdbcType=INTEGER},
        #{shipperName,jdbcType=VARCHAR}, #{shipperCode,jdbcType=VARCHAR}, #{logisticCode,jdbcType=VARCHAR},
        #{traces,jdbcType=VARCHAR}, #{isFinish,jdbcType=BIT}, #{requestCount,jdbcType=INTEGER},
        #{requestTime,jdbcType=INTEGER}, #{addTime,jdbcType=INTEGER}, #{updateTime,jdbcType=INTEGER}
        )
    </insert>
    <insert id="insertSelective" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpress">
        insert into nideshop_order_express
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="shipperId != null">
                shipper_id,
            </if>
            <if test="shipperName != null">
                shipper_name,
            </if>
            <if test="shipperCode != null">
                shipper_code,
            </if>
            <if test="logisticCode != null">
                logistic_code,
            </if>
            <if test="traces != null">
                traces,
            </if>
            <if test="isFinish != null">
                is_finish,
            </if>
            <if test="requestCount != null">
                request_count,
            </if>
            <if test="requestTime != null">
                request_time,
            </if>
            <if test="addTime != null">
                add_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="shipperId != null">
                #{shipperId,jdbcType=INTEGER},
            </if>
            <if test="shipperName != null">
                #{shipperName,jdbcType=VARCHAR},
            </if>
            <if test="shipperCode != null">
                #{shipperCode,jdbcType=VARCHAR},
            </if>
            <if test="logisticCode != null">
                #{logisticCode,jdbcType=VARCHAR},
            </if>
            <if test="traces != null">
                #{traces,jdbcType=VARCHAR},
            </if>
            <if test="isFinish != null">
                #{isFinish,jdbcType=BIT},
            </if>
            <if test="requestCount != null">
                #{requestCount,jdbcType=INTEGER},
            </if>
            <if test="requestTime != null">
                #{requestTime,jdbcType=INTEGER},
            </if>
            <if test="addTime != null">
                #{addTime,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpressExample"
            resultType="java.lang.Integer">
        select count(*) from nideshop_order_express
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update nideshop_order_express
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.orderId != null">
                order_id = #{record.orderId,jdbcType=INTEGER},
            </if>
            <if test="record.shipperId != null">
                shipper_id = #{record.shipperId,jdbcType=INTEGER},
            </if>
            <if test="record.shipperName != null">
                shipper_name = #{record.shipperName,jdbcType=VARCHAR},
            </if>
            <if test="record.shipperCode != null">
                shipper_code = #{record.shipperCode,jdbcType=VARCHAR},
            </if>
            <if test="record.logisticCode != null">
                logistic_code = #{record.logisticCode,jdbcType=VARCHAR},
            </if>
            <if test="record.traces != null">
                traces = #{record.traces,jdbcType=VARCHAR},
            </if>
            <if test="record.isFinish != null">
                is_finish = #{record.isFinish,jdbcType=BIT},
            </if>
            <if test="record.requestCount != null">
                request_count = #{record.requestCount,jdbcType=INTEGER},
            </if>
            <if test="record.requestTime != null">
                request_time = #{record.requestTime,jdbcType=INTEGER},
            </if>
            <if test="record.addTime != null">
                add_time = #{record.addTime,jdbcType=INTEGER},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update nideshop_order_express
        set id = #{record.id,jdbcType=INTEGER},
        order_id = #{record.orderId,jdbcType=INTEGER},
        shipper_id = #{record.shipperId,jdbcType=INTEGER},
        shipper_name = #{record.shipperName,jdbcType=VARCHAR},
        shipper_code = #{record.shipperCode,jdbcType=VARCHAR},
        logistic_code = #{record.logisticCode,jdbcType=VARCHAR},
        traces = #{record.traces,jdbcType=VARCHAR},
        is_finish = #{record.isFinish,jdbcType=BIT},
        request_count = #{record.requestCount,jdbcType=INTEGER},
        request_time = #{record.requestTime,jdbcType=INTEGER},
        add_time = #{record.addTime,jdbcType=INTEGER},
        update_time = #{record.updateTime,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpress">
        update nideshop_order_express
        <set>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=INTEGER},
            </if>
            <if test="shipperId != null">
                shipper_id = #{shipperId,jdbcType=INTEGER},
            </if>
            <if test="shipperName != null">
                shipper_name = #{shipperName,jdbcType=VARCHAR},
            </if>
            <if test="shipperCode != null">
                shipper_code = #{shipperCode,jdbcType=VARCHAR},
            </if>
            <if test="logisticCode != null">
                logistic_code = #{logisticCode,jdbcType=VARCHAR},
            </if>
            <if test="traces != null">
                traces = #{traces,jdbcType=VARCHAR},
            </if>
            <if test="isFinish != null">
                is_finish = #{isFinish,jdbcType=BIT},
            </if>
            <if test="requestCount != null">
                request_count = #{requestCount,jdbcType=INTEGER},
            </if>
            <if test="requestTime != null">
                request_time = #{requestTime,jdbcType=INTEGER},
            </if>
            <if test="addTime != null">
                add_time = #{addTime,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="net.messi.earlyadmin.pojo.NideshopOrderExpress">
        update nideshop_order_express
        set order_id = #{orderId,jdbcType=INTEGER},
        shipper_id = #{shipperId,jdbcType=INTEGER},
        shipper_name = #{shipperName,jdbcType=VARCHAR},
        shipper_code = #{shipperCode,jdbcType=VARCHAR},
        logistic_code = #{logisticCode,jdbcType=VARCHAR},
        traces = #{traces,jdbcType=VARCHAR},
        is_finish = #{isFinish,jdbcType=BIT},
        request_count = #{requestCount,jdbcType=INTEGER},
        request_time = #{requestTime,jdbcType=INTEGER},
        add_time = #{addTime,jdbcType=INTEGER},
        update_time = #{updateTime,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>